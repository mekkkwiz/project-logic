HIF003
--
-- Copyright (C) 1988-2002 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	debounce_button.v
	{
		debounce_button [] [D_FF.v,freq_div.v]
		{
			7 [] [];
		}
	}
	dmux3to8.v
	{
		dmux3to8 [] []
		{
			6 [] [];
		}
	}
	freq_div.v
	{
		freq_div [] [T_FF.v]
		{
			1 [] [];
		}
	}
	D_FF.v
	{
		d_ff [] []
		{
			3 [] [];
		}
	}
	T_FF.v
	{
		t_ff [] [D_FF.v]
		{
			2 [] [];
		}
	}
	counter_3bit.v
	{
		counter_3bit [] [T_FF.v]
		{
			4 [] [];
		}
	}
	Decode_7Seg.v
	{
		decode_7seg [] []
		{
			5 [] [];
		}
	}
	project_logic.v
	{
		project_logic [] [Decode_7Seg.v,dmux3to8.v,debounce_button.v,counter_3bit.v,freq_div.v]
		{
			0 [] [];
		}
	}
}
TREE
{
	project_logic::(0,0):(0): project_logic.v
	{
		debounce_button:7:(24,0):(27,db): debounce_button.v
		{
			freq_div:1:(9,0):(9,u1): freq_div.v
			{
				t_ff:2:(7,0):(3,t_ff01): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(8,0):(4,t_ff02): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(9,0):(5,t_ff03): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(10,0):(6,t_ff04): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(11,0):(7,t_ff05): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(12,0):(8,t_ff06): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(13,0):(9,t_ff07): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(14,0):(10,t_ff08): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(15,0):(11,t_ff09): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(16,0):(12,t_ff010): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(17,0):(13,t_ff011): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(18,0):(14,t_ff012): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(19,0):(15,t_ff013): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(20,0):(16,t_ff014): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(21,0):(17,t_ff015): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(22,0):(18,t_ff016): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(23,0):(19,t_ff017): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(24,0):(20,t_ff018): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
				t_ff:2:(25,0):(21,t_ff019): T_FF.v
				{
					d_ff:3:(6,0):(6,d1): D_FF.v;
				}
			}
			d_ff:3:(10,0):(10,d0): D_FF.v;
			d_ff:3:(12,0):(11,d1): D_FF.v;
			d_ff:3:(13,0):(12,d2): D_FF.v;
		}
		freq_div:1:(19,0):(28,fd0): freq_div.v
		{
			t_ff:2:(7,0):(3,t_ff01): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(8,0):(4,t_ff02): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(9,0):(5,t_ff03): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(10,0):(6,t_ff04): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(11,0):(7,t_ff05): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(12,0):(8,t_ff06): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(13,0):(9,t_ff07): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(14,0):(10,t_ff08): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(15,0):(11,t_ff09): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(16,0):(12,t_ff010): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(17,0):(13,t_ff011): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(18,0):(14,t_ff012): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(19,0):(15,t_ff013): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(20,0):(16,t_ff014): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(21,0):(17,t_ff015): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(22,0):(18,t_ff016): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(23,0):(19,t_ff017): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(24,0):(20,t_ff018): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(25,0):(21,t_ff019): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
		}
		counter_3bit:4:(22,0):(29,lightcouter): counter_3bit.v
		{
			t_ff:2:(7,0):(7,t0): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(8,0):(8,t1): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(12,0):(9,t2): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
		}
		counter_3bit:4:(30,0):(30,scorecouter): counter_3bit.v
		{
			t_ff:2:(7,0):(7,t0): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(8,0):(8,t1): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
			t_ff:2:(12,0):(9,t2): T_FF.v
			{
				d_ff:3:(6,0):(6,d1): D_FF.v;
			}
		}
		decode_7seg:5:(38,0):(31,decoder): Decode_7Seg.v;
		dmux3to8:6:(28,0):(32,demux): dmux3to8.v;
	}
}
